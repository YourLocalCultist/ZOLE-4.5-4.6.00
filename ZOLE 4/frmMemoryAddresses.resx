<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>D00D  Link's X Position
D00B  Link's Y Position
CC99  Tile that Link is Standing On (YX)
CC9A  Tile ID that Link is Standing On
CC2D  Active Map Group:
      00  Present Overworld
      01  Past Overworld
      02  Present Underwater
      03  Past Underwater
      04  Dungeons
      05  Dungeons
      06  Side-Scrolling 1
      07  Side-Scrolling 2
CC2F  Map Backup / Real Map to Go Into
CC30  Active Map
CD23  Active Map Tileset
CD25  Active Map Animation
CD28  Active Map Unique
CD29  Active Map Palette
CC48  Map to Warp Into
CC6C  Pegasus Seed Timer
CC6D  Pegasus Seed Timer Loop
CC29  Buttons Being Pressed
CC2A  Buttons that Have Been Pressed
C6C4  Selected Seed Satchel Seed
C6C5  Selected Seed Shooter Seed
CD02  Last Map Transition Direction (URDL)
CCA0  Triggers Being Pressed
CCAB  How Long the Wall Lever is Pulled (C0 for Full)</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>C6AD  Last 2 Digits of Rupee Amount
C6AE  First digit of Rupee Amount (Hundred)
C6AA  Current Life In-Game
C6AB  Total Amount of Hearts
C688  B Item
C689  A Item
C68A  Slot 1 on Inventory Screen
 to
C699  Slot 16 on Inventory Screen
C6B9  Number of Ember Seeds
C6BA  Number of Scent Seeds
C6BB  Number of Pegasus Seeds
C6BC  Number of Gale Seeds
C6BD  Number of Mistery Seeds
C6BE  Number of Gasha Seeds
C6B0  Number of Bombs
C6AC  Number of Pieces of Heart
C675  Number of Small Keys
C6B2  Sword Level
C6AF  Shield Level
C6B8  Power Bracelet Level
C6B7  Harp of Ages Songs Obtained
C6BF  Essences (FF for All Essences)
C69F  Secondary Items (FF for All)
 to
C6A5  Secondary Items (FF for All)
C69E  Seeds Obtained for Use (FF = All Seelds)
C616
 to
C61D  Rings Obtained in List Box (FF for All Rings in Each List)
C6CC  Level of Ring Box
C6C6
 to
C6CA  Rings in Ring Box
C6CB  Ring Currently Equipped
C6CD  Number of Rings (Resets on Inventory Open)
C6B5  Animal Flute Icon:
      01  Ricky
      02  Dimitri
      03  Moosh
C610  Animal Song + Animal + Map Features:
      0B  Ricky
      0C  Dimitri
      0D Moosh</value>
  </data>
</root>